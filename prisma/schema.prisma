// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -------------------- ACCOUNT & SESSION MODELS --------------------
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// -------------------- USER MODEL --------------------
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName     String
  lastName      String
  phoneNumber   String?
  username      String?   @unique
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(PET_OWNER)

  isVerified    Boolean   @default(false)
  token         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
  // pets          Pet[]      @relation("OwnerPets")
}

enum UserRole {
  ADMIN
  VET_DOCTOR
  VET_NURSE
  VET_RECEPTIONIST
  PET_OWNER
}

// // -------------------- PET MODEL --------------------
// model Pet {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   breed       String
//   age         Int
//   owner       User          @relation("OwnerPets", fields: [ownerId], references: [id])
//   ownerId     String        @db.ObjectId
//   medicalRecords MedicalRecord[]
//   appointments Appointment[]
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
// }

// // -------------------- APPOINTMENT MODEL --------------------
// model Appointment {
//   id          String       @id @default(auto()) @map("_id") @db.ObjectId
//   pet         Pet          @relation(fields: [petId], references: [id])
//   petId       String       @db.ObjectId
//   owner       User         @relation(fields: [ownerId], references: [id])
//   ownerId     String       @db.ObjectId
//   veterinarian User        @relation(fields: [veterinarianId], references: [id])
//   veterinarianId String    @db.ObjectId
//   receptionist User        @relation(fields: [receptionistId], references: [id])
//   receptionistId String?   @db.ObjectId
//   timeSlot    DateTime
//   status      AppointmentStatus
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
// }

// enum AppointmentStatus {
//   SCHEDULED
//   RESCHEDULED
//   COMPLETED
//   CANCELED
// }

// // -------------------- MEDICAL RECORD MODEL --------------------
// model MedicalRecord {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   pet            Pet        @relation(fields: [petId], references: [id])
//   petId          String     @db.ObjectId
//   veterinarian   User       @relation(fields: [veterinarianId], references: [id])
//   veterinarianId String     @db.ObjectId
//   description    String
//   prescriptions  String[]
//   diagnosticReports String[]
//   vaccinations   String[]
//   createdAt      DateTime   @default(now())
//   updatedAt      DateTime   @updatedAt
// }

// // -------------------- INVOICE & PAYMENT MODEL --------------------
// model Invoice {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   owner          User       @relation(fields: [ownerId], references: [id])
//   ownerId        String     @db.ObjectId
//   services       String[]
//   totalAmount    Float
//   paymentStatus  PaymentStatus
//   paymentMethod  PaymentMethod
//   createdAt      DateTime   @default(now())
//   updatedAt      DateTime   @updatedAt
// }

// enum PaymentStatus {
//   PENDING
//   PAID
//   FAILED
// }

// enum PaymentMethod {
//   CASH
//   CARD
//   ONLINE
// }

// // -------------------- NOTIFICATION MODEL --------------------
// model Notification {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   user           User       @relation(fields: [userId], references: [id])
//   userId         String     @db.ObjectId
//   message        String
//   sentAt         DateTime   @default(now())
//   method         NotificationMethod
// }

// enum NotificationMethod {
//   EMAIL
//   SMS
// }

// -------------------- ROLE-BASED ACCESS CONTROL --------------------
// Role-specific access logic will be enforced in the application layer,
// while the schema defines relationships and entity structure.
