// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// -------------------- ACCOUNT & SESSION MODELS --------------------
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// -------------------- USER MODEL --------------------
enum UserRole {
  ADMIN
  VET_DOCTOR
  VET_NURSE
  VET_RECEPTIONIST
  PET_OWNER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName     String
  lastName      String
  phoneNumber   String?
  username      String?   @unique
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(PET_OWNER)

  isVerified    Boolean   @default(false)
  token         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
  
  // // Role-based profile information
  // adminProfile               AdminProfile?           @relation(fields: [adminProfileId], references: [id])
  // adminProfileId             String?                 @db.ObjectId
  
  // veterinarianProfile        VeterinarianProfile?    @relation(fields: [veterinarianProfileId], references: [id])
  // veterinarianProfileId      String?                 @db.ObjectId
  
  // vetNurseProfile            VetNurseProfile?        @relation(fields: [vetNurseProfileId], references: [id])
  // vetNurseProfileId          String?                 @db.ObjectId

  // vetReceptionistProfile     VetReceptionistProfile? @relation(fields: [vetReceptionistProfileId], references: [id])
  // vetReceptionistProfileId   String?                 @db.ObjectId

  // petOwnerProfile            PetOwnerProfile?        @relation(fields: [petOwnerProfileId], references: [id])
  // petOwnerProfileId          String?                 @db.ObjectId

  
}

// // -------------------- PROFILE MODELS FOR ROLES --------------------
// // Profile for Admin Role
// model AdminProfile {
//   id                          String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId                      String    @unique @db.ObjectId
//   adminSince                  DateTime  @default(now())
//   reportsGenerated            Int       @default(0)
//   user                        User      @relation(fields: [userId], references: [id])

//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
// }

// // Profile for Veterinarian Role
// model VeterinarianProfile {
//   id                          String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId                      String    @unique @db.ObjectId
//   age                         Int
//   address                     String
//   licenseNumber               String    @unique
//   specialization              String
//   yearsOfExperience           Int
//   consultationHistory         Int       @default(0)
//   user           User                   @relation(fields: [userId], references: [id])

//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
// }

// // Profile for Vet Nurse Role
// model VetNurseProfile {
//   id                          String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId                      String    @unique @db.ObjectId
//   age                         Int
//   address                     String
//   licenseNumber               String    @unique
//   experienceLevel             String    // e.g., Junior, Senior
//   assistCount                 Int       @default(0)
//   user                        User      @relation(fields: [userId], references: [id])

//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
// }

// // Profile for Vet Receptionist Role
// model VetReceptionistProfile {
//   id                          String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId                      String    @unique @db.ObjectId
//   age                         Int
//   address                     String
//   yearsOfExperience           Int
//   appointmentsHandled         Int       @default(0)
//   user           User                   @relation(fields: [userId], references: [id])

//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt

// }

// // // Profile for Pet Owner Role
// model PetOwnerProfile {
//   id             String    @id @default(auto()) @map("_id") @db.ObjectId
//   userId         String    @unique @db.ObjectId
//   age            Int
//   address        String
//   totalPets      Int       @default(0)
//   user           User      @relation(fields: [userId], references: [id])

//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt

//   pets           Pet[]      @relation("OwnerPets")
// }

// // // -------------------- PET MODEL --------------------
// model Pet {
//   id              String        @id @default(auto()) @map("_id") @db.ObjectId
//   petName         String
//   petSex          String
//   species         String
//   breed           String
//   age             Int
//   weight          Int
//   color           String
//   specialMarkings String
  
//   owner           PetOwnerProfile @relation(fields: [ownerId], references: [id])
//   ownerId         String        @db.ObjectId
//   medicalRecords  MedicalRecord[]
//   appointments    Appointment[]
//   createdAt       DateTime      @default(now())
//   updatedAt       DateTime      @updatedAt
// }

// // -------------------- MEDICAL RECORD MODEL --------------------
// model MedicalRecord {
//   id              String            @id @default(auto()) @map("_id") @db.ObjectId
//   petId           String            @db.ObjectId
//   pet             Pet               @relation(fields: [petId], references: [id])

//   // Medical History
//   medicalHistories MedicalHistory[]

//   // Medicines
//   medicines       Medicine[]

//   // Antiparasitic Treatments
//   antiparasitics  Antiparasitic[]

//   // Prescriptions
//   prescriptions   Prescription[]

//   // Lab Results
//   labResults      LabResult[]

//   // Vaccinations
//   vaccinations    Vaccination[]
// }

// // -------------------- MEDICAL HISTORY --------------------
// model MedicalHistory {
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   type        MedicalHistoryType
//   date        DateTime
//   note        String?
//   file        String?     // File Attachment (URL or Path)
//   medicalRecordId String  @db.ObjectId
//   medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
// }

// enum MedicalHistoryType {
//   SURGERY
//   ALLERGIES
//   ONLINE_CONSULTATION
//   CLINIC_VISIT
//   VACCINE_BOOKLET
//   PROCEDURE
//   OTHER
// }

// // -------------------- MEDICINE --------------------
// model Medicine {
//   id          String     @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   startDate   DateTime
//   endDate     DateTime?
//   interval    String     // e.g., twice daily, every 4 hours
//   dosage      String
//   note        String?
//   medicalRecordId String  @db.ObjectId
//   medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
// }

// // -------------------- ANTIPARASITIC --------------------
// model Antiparasitic {
//   id              String     @id @default(auto()) @map("_id") @db.ObjectId
//   name            String
//   dateAdministered DateTime
//   petWeight       Float
//   nextTreatmentDate DateTime?
//   veterinarian    String     // Veterinarian Name
//   vetLicenseNumber String    // Veterinarian License Number
//   note            String?
//   medicalRecordId String     @db.ObjectId
//   medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
// }

// // -------------------- PRESCRIPTION --------------------
// model Prescription {
//   id              String     @id @default(auto()) @map("_id") @db.ObjectId
//   name            String
//   veterinarian    String     // Veterinarian Name
//   vetLicenseNumber String    // Veterinarian License Number
//   note            String?
//   file            String?    // File Attachment (URL or Path)
//   medicalRecordId String     @db.ObjectId
//   medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
// }

// // -------------------- LAB RESULT --------------------
// model LabResult {
//   id              String     @id @default(auto()) @map("_id") @db.ObjectId
//   name            String     // Name of Lab Result
//   datePerformed   DateTime
//   note            String?
//   file            String?    // File Attachment (URL or Path)
//   medicalRecordId String     @db.ObjectId
//   medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
// }

// // -------------------- VACCINATION --------------------
// model Vaccination {
//   id              String     @id @default(auto()) @map("_id") @db.ObjectId
//   dateAdministered DateTime
//   petWeight       Float
//   name            String     // Vaccination Name
//   against         String     // Vaccination Against (e.g., Rabies)
//   nextVaccinationDate DateTime?
//   veterinarian    String     // Veterinarian Name
//   vetLicenseNumber String    // Veterinarian License Number
//   manufacturer    String?
//   lotNumber       String?
//   note            String?
//   file            String?    // File Attachment (URL or Path)
//   medicalRecordId String     @db.ObjectId
//   medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  
//   createdAt       DateTime           @default(now())
//   updatedAt       DateTime           @updatedAt
// }

// // -------------------- APPOINTMENT MODEL --------------------
// model Appointment {
//   id          String       @id @default(auto()) @map("_id") @db.ObjectId
//   pet         Pet          @relation(fields: [petId], references: [id])
//   petId       String       @db.ObjectId
//   owner       PetOwnerProfile @relation(fields: [ownerId], references: [id])
//   ownerId     String       @db.ObjectId
//   veterinarian User        @relation(fields: [veterinarianId], references: [id])
//   veterinarianId String    @db.ObjectId
//   receptionist User        @relation(fields: [receptionistId], references: [id])
//   receptionistId String?   @db.ObjectId
//   timeSlot    DateTime
//   status      AppointmentStatus
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @updatedAt
// }

// enum AppointmentStatus {
//   SCHEDULED
//   RESCHEDULED
//   COMPLETED
//   CANCELED
// }

// // -------------------- INVOICE & PAYMENT MODEL --------------------
// model Invoice {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   owner          User       @relation(fields: [ownerId], references: [id])
//   ownerId        String     @db.ObjectId
//   services       String[]
//   totalAmount    Float
//   paymentStatus  PaymentStatus
//   paymentMethod  PaymentMethod
//   createdAt      DateTime   @default(now())
//   updatedAt      DateTime   @updatedAt
// }

// enum PaymentStatus {
//   PENDING
//   PAID
//   FAILED
// }

// enum PaymentMethod {
//   CASH
//   CARD
//   ONLINE
// }

// // -------------------- NOTIFICATION MODEL --------------------
// model Notification {
//   id             String     @id @default(auto()) @map("_id") @db.ObjectId
//   user           User       @relation(fields: [userId], references: [id])
//   userId         String     @db.ObjectId
//   message        String
//   sentAt         DateTime   @default(now())
//   method         NotificationMethod
// }

// enum NotificationMethod {
//   EMAIL
//   SMS
// }

// -------------------- ROLE-BASED ACCESS CONTROL --------------------
// Role-specific access logic will be enforced in the application layer,
// while the schema defines relationships and entity structure.
