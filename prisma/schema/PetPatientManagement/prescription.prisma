// -------------------- PRESCRIPTION --------------------
model Prescription {
  id                      String                @id @default(auto()) @map("_id") @db.ObjectId
  createdByDoctor DoctorProfile?  @relation(name: "DoctorPrescriptionsAdministered", fields: [createdByDoctorId, createdByDoctorFirstName, createdByDoctorLastName], references: [doctorId, doctorFirstName, doctorLastName], onDelete: Cascade, onUpdate: Cascade)
  createdByDoctorId         String?      @db.ObjectId
  createdByDoctorFirstName String?
  createdByDoctorLastName String?

  createdByNurse NurseProfile? @relation(name: "NursePrescriptionsAdministered", fields: [createdByNurseId, createdByNurseFirstName, createdByNurseLastName], references: [nurseId, nurseFirstName, nurseLastName], onDelete: Cascade, onUpdate: Cascade)
  createdByNurseId         String?      @db.ObjectId
  createdByNurseFirstName String?
  createdByNurseLastName  String?

  createdByPetOwner PetOwnerProfile?  @relation(name: "PetPrescriptionCreated", fields: [petOwnerId, petOwnerFirstName, petOwnerLastName], references: [petOwnerId, petOwnerFirstName, petOwnerLastName], onDelete: Cascade, onUpdate: Cascade)
  petOwnerId      String?            @db.ObjectId
  petOwnerFirstName String?
  petOwnerLastName   String?

  petPatient              Pet                   @relation(name: "PetPrescription", fields: [petId, petName], references: [petId, petName], onDelete: Cascade, onUpdate: Cascade)
  petId                   Int                   @unique
  petName                 String

  name                    String
 
  licenseNumber           String                // Veterinarian License Number
  note                    String?
  file                    String               // File Attachment (URL or Path)
  
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}