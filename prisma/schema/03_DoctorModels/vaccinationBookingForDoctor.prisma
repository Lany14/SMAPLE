model VaccinationBookingForDoctor {
  id                            String            @id @default(auto()) @map("_id") @db.ObjectId
  bookingId                     String            @unique

  doctor                        DoctorProfile     @relation(name: "DoctorVaccinationBookings", fields: [doctorIdAdministered, doctorFirstNameAdministered, doctorLastNameAdministered, doctorEmailAdministered], references: [doctorId, doctorFirstName, doctorLastName, doctorEmail], onDelete: Cascade, onUpdate: Cascade)
  doctorIdAdministered          String           @db.ObjectId
  doctorFirstNameAdministered   String
  doctorLastNameAdministered    String
  doctorEmailAdministered       String

  pet               Pet               @relation(name: "PetVaccinations", fields: [petId, petName], references: [petId, petName], onDelete: Cascade, onUpdate: Cascade)
  petId             Int               @unique
  petName           String

  petOwner          PetOwnerProfile   @relation(name: "PetOwnerVaccinationBookings", fields: [petOwnerId, petOwnerFirstName, petOwnerLastName, petOwnerEmail], references: [petOwnerId, petOwnerFirstName, petOwnerLastName, petOwnerEmail], onDelete: Cascade, onUpdate: Cascade)
  petOwnerId        String            @db.ObjectId
  petOwnerFirstName String
  petOwnerLastName  String
  petOwnerEmail     String

  status            BookingStatus      @default(PENDING)   // Start with 'PENDING' status

  date              DateTime
  time              String
  vaccineNeeded     String
  note              String?
  vaccineBooklet    String        // File Attachment (URL or Path)

  // Audit Fields
  createdBy       String?          @map("createdBy")
  updatedBy       String?          @map("updatedBy")

  // Audit Timestamps
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}